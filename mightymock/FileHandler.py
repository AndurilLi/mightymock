'''
Created on Jul 7, 2014

@author: pli
'''
import os, traceback, copy, shutil
import json, base64
import importlib
import MockGlobals

class FileHandler:
    
    template = '''#APITemplate, generated by MockServer

request= %s

response = %s

#delay = 1 #you can actually use special delay time in the template
'''
    def __init__(self, folderpath):
        self.folderpath = folderpath
        init_filepath = os.path.join(self.folderpath, "__init__.py")
        if not os.path.isfile(init_filepath):
            self.write_file(init_filepath, "")
            MockGlobals.get_mocklogger().info("Create __init__.py automatically for %s" % folderpath)
        for filename in os.listdir(self.folderpath):
            if filename.endswith(".pyc"):
                os.remove(os.path.join(self.folderpath, filename))
        MockGlobals.get_mocklogger().info("All pyc file are cleaned from %s" % folderpath)
        
    def write_file(self, filename, data):
        filepath = os.path.join(self.folderpath, filename)
        f = open(filepath, "w")
        f.write(data)
        f.close()
    
    def reset_name(self):
        try:
            from MockServer import MockServer
            filelist = os.listdir(self.folderpath)
            for filename in filelist:
                if filename != "__init__.py" and filename.endswith(".py"):
                    module = self.read_module(filename)
                    request = {
                                "path": module.request["path"],
                                "method": module.request["method"]
                               }
                    if module.request.has_key("headers") or module.request.has_key("body") \
                    or module.request.has_key("parameters"):
                        request["requestheaders"] = self.__recover_format(module.request["headers"]["data"], module.request["headers"]["type"])
                        request["requestbody"] = self.__recover_format(module.request["body"]["data"], module.request["body"]["type"])
                        request["parameters"] = module.request["parameters"]
                        realname = MockServer.get_strictname(request)
                    else:
                        realname = MockServer.get_relaxname(request)
                    if filename != realname:
                        oldpath = os.path.join(self.folderpath, filename)
                        shutil.copy(oldpath, oldpath+".bak")
                        shutil.copy(oldpath, os.path.join(self.folderpath, realname))
                        os.remove(oldpath)
                        MockGlobals.get_mocklogger().info("Change template name %s to %s for re-mapping" % (filename, realname))
        except Exception, e:
            traceback.print_exc()
            MockGlobals.get_mocklogger().error("ResetName failed with error %s" % str(e))
            
    def read_module(self, filename):
        try:
            folder_name = os.path.split(self.folderpath)[1]
            module_name = os.path.splitext(filename)[0]
            filepath = os.path.join("%s.%s" %(folder_name, module_name))
            request_module = importlib.import_module(filepath)
        except:
            traceback.print_exc()
            MockGlobals.get_mocklogger().error("Cannot import file %s" % filename)
            return None
        return request_module
    
    def __verify_format(self, data):
        try: 
            json.dumps(data)
            return data, "json"
        except:
            try:
                return data.encode("utf-8"), "string"
            except:
                return base64.b64encode(data), "base64"
    
    def __recover_format(self, data, datatype):
        if datatype in ["json","string"]:
            return data
        else:
            return base64.b64decode(data)
     
    def __decode_format(self, data):
        if type == "json":
            return json.loads(data)
        
    def create_request(self, request, filename, mode):
        resp_headers, resp_headers_type = self.__verify_format(request["responseheaders"])
        resp_body, resp_body_type = self.__verify_format(request["responsebody"])
        req = {
                "method": request["method"],
                "path": request["path"]
                }
        from MockServer import RequestMode
        if mode == RequestMode.strict:
            req_headers, req_headers_type = self.__verify_format(request["requestheaders"])
            req_body, req_body_type = self.__verify_format(request["requestbody"])
            req["headers"] = {
                             "data": req_headers,
                             "type": req_headers_type
                             }
            req["body"] = {
                           "data": req_body,
                           "type": req_body_type
                           }
            req["parameters"] = request["parameters"]
            
        resp = [{
                    "headers": {"data": resp_headers,
                                "type": resp_headers_type },
                    "status": request["status"],
                    "body": {"data": resp_body,
                             "type": resp_body_type
                             }
                 }]
        js_req = json.dumps(req, indent=2, sort_keys=True)
        js_resp = json.dumps(resp, indent=2, sort_keys=True)
        template = self.template % (js_req, js_resp)
        self.write_file(filename, template)

    def add_request(self, request, filename, mode):
        request_module = self.read_module(filename)
        if request_module:
            old_request = request_module.request
            old_response = request_module.response
            resp_headers, resp_headers_type = self.__verify_format(request["responseheaders"])
            resp_body, resp_body_type = self.__verify_format(request["responsebody"])
            new_response = {
                                "headers": {"data": resp_headers,
                                            "type": resp_headers_type },
                                "status": request["status"],
                                "body": {"data": resp_body,
                                         "type": resp_body_type
                                         }
                             }
            old_response.append(new_response)
            js_req = json.dumps(old_request, indent=2, sort_keys=True)
            js_resp = json.dumps(old_response, indent=2, sort_keys=True)
            template = self.template % (js_req, js_resp)
            self.write_file(filename, template)
        
    def read_response(self, filename, number=None):
        request_module = self.read_module(filename)
        if request_module:
            responses = request_module.response
            from MockServer import MockServer
            if filename not in MockServer.number_mapping:
                MockServer.number_mapping[filename] = 0
                currentnumber = 0 if not number else number
            else:
                currentnumber = MockServer.number_mapping[filename] if not number else number
            if currentnumber >= len(responses):
                currentnumber = 0
            response = copy.deepcopy(responses[currentnumber])
            MockServer.number_mapping[filename] = currentnumber + 1
            
            response["headers"] = self.__recover_format(response["headers"]["data"], response["headers"]["type"])
            response["body"] = self.__recover_format(response["body"]["data"], response["body"]["type"])
            if hasattr(request_module,"delay"):
                response["delay"] = request_module.delay
            return response
        else:
            return None
        
    def set_response_common(self, filename, request, number = 0):
        request_module = self.read_module(filename)
        if request_module:
            old_responses = request_module.response
            resp_headers, resp_headers_type = self.__verify_format(request["responseheaders"])
            resp_body, resp_body_type = self.__verify_format(request["responsebody"])
            new_response = {
                                "headers": {"data": resp_headers,
                                            "type": resp_headers_type },
                                "status": request["status"],
                                "body": {"data": resp_body,
                                         "type": resp_body_type
                                         }
                             }
            responses = []
            i = 0
            for key in old_responses:
                if number == i:
                    responses.append(new_response)
                responses.append(key)
                i += 1
            js_req = json.dumps(request_module.request, indent=2, sort_keys=True)
            js_resp = json.dumps(responses, indent=2, sort_keys=True)
            template = self.template % (js_req, js_resp)
            self.write_file(filename, template)
            